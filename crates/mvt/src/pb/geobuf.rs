// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Data {
    /// global arrays of unique keys
    #[prost(string, repeated, tag = "1")]
    pub keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// max coordinate dimensions
    #[prost(uint32, optional, tag = "2", default = "2")]
    pub dimensions: ::core::option::Option<u32>,
    /// number of digits after decimal point for coordinates
    #[prost(uint32, optional, tag = "3", default = "6")]
    pub precision: ::core::option::Option<u32>,
    #[prost(oneof = "data::DataType", tags = "4, 5, 6")]
    pub data_type: ::core::option::Option<data::DataType>,
}
/// Nested message and enum types in `Data`.
pub mod data {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Feature {
        #[prost(message, required, tag = "1")]
        pub geometry: Geometry,
        /// unique values
        #[prost(message, repeated, tag = "13")]
        pub values: ::prost::alloc::vec::Vec<Value>,
        /// pairs of key/value indexes
        #[prost(uint32, repeated, tag = "14")]
        pub properties: ::prost::alloc::vec::Vec<u32>,
        /// arbitrary properties
        #[prost(uint32, repeated, tag = "15")]
        pub custom_properties: ::prost::alloc::vec::Vec<u32>,
        #[prost(oneof = "feature::IdType", tags = "11, 12")]
        pub id_type: ::core::option::Option<feature::IdType>,
    }
    /// Nested message and enum types in `Feature`.
    pub mod feature {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum IdType {
            #[prost(string, tag = "11")]
            Id(::prost::alloc::string::String),
            #[prost(sint64, tag = "12")]
            IntId(i64),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Geometry {
        #[prost(enumeration = "geometry::Type", required, tag = "1")]
        pub r#type: i32,
        /// coordinate structure in lengths
        #[prost(uint32, repeated, tag = "2")]
        pub lengths: ::prost::alloc::vec::Vec<u32>,
        /// delta-encoded integer values
        #[prost(sint64, repeated, tag = "3")]
        pub coords: ::prost::alloc::vec::Vec<i64>,
        #[prost(message, repeated, tag = "4")]
        pub geometries: ::prost::alloc::vec::Vec<Geometry>,
        #[prost(message, repeated, tag = "13")]
        pub values: ::prost::alloc::vec::Vec<Value>,
        #[prost(uint32, repeated, tag = "15")]
        pub custom_properties: ::prost::alloc::vec::Vec<u32>,
    }
    /// Nested message and enum types in `Geometry`.
    pub mod geometry {
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Type {
            Point = 0,
            Multipoint = 1,
            Linestring = 2,
            Multilinestring = 3,
            Polygon = 4,
            Multipolygon = 5,
            Geometrycollection = 6,
        }
        impl Type {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::Point => "POINT",
                    Self::Multipoint => "MULTIPOINT",
                    Self::Linestring => "LINESTRING",
                    Self::Multilinestring => "MULTILINESTRING",
                    Self::Polygon => "POLYGON",
                    Self::Multipolygon => "MULTIPOLYGON",
                    Self::Geometrycollection => "GEOMETRYCOLLECTION",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "POINT" => Some(Self::Point),
                    "MULTIPOINT" => Some(Self::Multipoint),
                    "LINESTRING" => Some(Self::Linestring),
                    "MULTILINESTRING" => Some(Self::Multilinestring),
                    "POLYGON" => Some(Self::Polygon),
                    "MULTIPOLYGON" => Some(Self::Multipolygon),
                    "GEOMETRYCOLLECTION" => Some(Self::Geometrycollection),
                    _ => None,
                }
            }
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FeatureCollection {
        #[prost(message, repeated, tag = "1")]
        pub features: ::prost::alloc::vec::Vec<Feature>,
        #[prost(message, repeated, tag = "13")]
        pub values: ::prost::alloc::vec::Vec<Value>,
        #[prost(uint32, repeated, tag = "15")]
        pub custom_properties: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Value {
        #[prost(oneof = "value::ValueType", tags = "1, 2, 3, 4, 5, 6")]
        pub value_type: ::core::option::Option<value::ValueType>,
    }
    /// Nested message and enum types in `Value`.
    pub mod value {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum ValueType {
            #[prost(string, tag = "1")]
            StringValue(::prost::alloc::string::String),
            #[prost(double, tag = "2")]
            DoubleValue(f64),
            #[prost(uint64, tag = "3")]
            PosIntValue(u64),
            #[prost(uint64, tag = "4")]
            NegIntValue(u64),
            #[prost(bool, tag = "5")]
            BoolValue(bool),
            #[prost(string, tag = "6")]
            JsonValue(::prost::alloc::string::String),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum DataType {
        #[prost(message, tag = "4")]
        FeatureCollection(FeatureCollection),
        #[prost(message, tag = "5")]
        Feature(Feature),
        #[prost(message, tag = "6")]
        Geometry(Geometry),
    }
}
